reset;
include modelFile.mod;
data parametersB.dat;

#settings
#--------------------------------
let T := 200; 
let nrOfSim := 5000; 
let nrOfIt := 15; 
let sampleSize := 5; 
let Tsample := 8; 
#let METHODS := {'AF','acceptAll'};
let METHODS := {'AF','acceptAll'};
#--------------------------------

let thetaAFsim := 0;
let {i in 1..I}VAFsim[i] := 0;
let {VFA in {'AF'}} SAMCONS[VFA] := {};
let conindex := 0;
for {it in 1..nrOfIt} {
	for {s in 1..sampleSize} {
		display s;
		let {i in 1..I} xRand[i] := max(0,ceil(Uniform(-1,xmax)));
		let {VFA in {'AF'}, i in 1..I} xSim[VFA,i] := xRand[i];
		for {t in 0..Tsample-1} {
			let {VFA in {'AF'}, A in 0..Amax} decision[VFA,A] := 
				-beta*sum{i in 1..I}xSim[VFA,i]
				+sum{l in 0..L, i1 in 1..I, i2 in 1..I}lambda[l]*p[i1]*q[i2]*(
					(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*r[l]*(if xSim[VFA,i1] < xmax then 1 else 0)
					+alpha*sum{i in 1..I}VAF[i]*
						max(0,xSim[VFA,i]
							+(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*(if i=i1 and xSim[VFA,i]<xmax then 1 else 0)
							-(if i=i2 then 1 else 0))
				);
			for {VFA in {'AF'}} {
				let auxMax := -Infinity;
				let Astar[VFA] := -1;
				for {A in 0..Amax} {
					if decision[VFA,A] > auxMax then {
						let Astar[VFA] := A;
						let auxMax := decision[VFA,A];
					}
				}
				let found := 0;
				if 1=1 then {
					for {cc in SAMCONS[VFA]} {
						let isequal := 1;
						for {i in 1..I} {
							if xhatSample[VFA,cc,i] != xSim[VFA,i] then let isequal := 0;
						}
						for {l in 1..L} {
							if ahatSample[VFA,cc,l] != floor((Astar[VFA] mod 2^l)/(2^(l-1))) then let isequal := 0;
						}
						if isequal = 1 then let found := 1;
					}
				}
				if found = 0 then {
					let conindex := conindex + 1;
					let SAMCONS[VFA] := SAMCONS[VFA] union {conindex};
					let {i in 1..I} xhatSample[VFA,conindex,i] := xSim[VFA,i];
					let {l in 1..L} ahatSample[VFA,conindex,l] := floor((Astar[VFA] mod 2^l)/(2^(l-1)));
				}
			}
			let dice := Uniform(0,1);
			for {l in 0..L} {
				if sum{ll in 0..l-1}lambda[ll] <= dice <= sum{ll in 0..l}lambda[ll] then let lstar := l;
			}
			let {VFA in {'AF'}} 
				alstar[VFA] := floor((Astar[VFA] mod 2^lstar)/(2^(lstar-1)));
			let dice := Uniform(0,1);
			for {i1 in 1..I} {
				if sum{ii in 1..i1-1}p[ii] <= dice <= sum{ii in 1..i1}p[ii] then let i1star := i1;
			}
			let dice := Uniform(0,1);
			for {i2 in 1..I} {
				if sum{ii in 1..i2-1}q[ii] <= dice <= sum{ii in 1..i2}q[ii] then let i2star := i2;
			}
			for {VFA in {'AF'}} {
				if xSim[VFA,i1star] = xmax then let alstar[VFA] := 0;
				let xSim[VFA,i1star] := xSim[VFA,i1star]+alstar[VFA];
				let xSim[VFA,i2star] := max(0,xSim[VFA,i2star]-1);
			}
		}
	}
	solve AFsample;
	let thetaAFsim := thetaAF;
	let {i in 1..I}VAFsim[i] := VAF[i];
}

include simulation.run;

display SAMCONS;
display thetaAFsim;
display VAFsim;
display ZAF;
display averageReward;
display confidence;
