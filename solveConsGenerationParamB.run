reset;
include modelFile.mod;
data parametersB.dat;

#settings
#--------------------------------
let T := 200;
let nrOfSim := 5000;
let deltaTol := 0.001;
let METHODS := {'AF','acceptAll'};
#--------------------------------

let GENCONS['AF'] := {};
let epsilonErr := Infinity;
let {i in 1..I} VAFsim[i] := 0;
let thetaAFsim := 0; 
let conindex := 0;
repeat while epsilonErr > deltaTol {
	let conindex := conindex + 1;
	let GENCONS['AF'] := GENCONS['AF'] union {conindex};
	let oldMax1 := - Infinity;
	for {A in 0..Amax} {
		for {i in 1..I} {
			let oldMax2 := -Infinity;
			for {x in 0..xmax} {
				let newMax2 := -VAFsim[i]*x-beta*x
					+sum{l in 0..L}lambda[l]*p[i]*(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*(if x < xmax then 1 else 0)*r[l]
					+alpha*sum{l in 0..L, i1 in 1..I, i2 in 1..I} lambda[l]*p[i1]*q[i2]*VAFsim[i]*
						max(0,x
							+(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*(if i=i1 and x<xmax then 1 else 0)
							-(if i=i2 then 1 else 0));
				if newMax2 > oldMax2 then {
					let currXmax[i] := x;
					let oldMax2 := newMax2;
				}
			}
		}
		let newMax1 := sum{i in 1..I} (
			-VAFsim[i]*currXmax[i] - beta*currXmax[i]
			+sum{l in 0..L}lambda[l]*p[i]*(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*r[l]*(if currXmax[i] < xmax then 1 else 0)
			+alpha*sum{l in 0..L, i1 in 1..I, i2 in 1..I}lambda[l]*p[i1]*q[i2]*VAFsim[i]*
				max(0,currXmax[i]
					+(if l=0 then 0 else floor((A mod 2^l)/(2^(l-1))))*(if i=i1 and currXmax[i]<xmax then 1 else 0)
					-(if i=i2 then 1 else 0))
			)-(1-alpha)*thetaAFsim;
		if newMax1 > oldMax1 then {
			let {i in 1..I} xhatGen['AF',conindex,i] := currXmax[i];
			let {l in 1..L} ahatGen['AF',conindex,l] := floor((A mod 2^l)/(2^(l-1)));
			let oldMax1 := newMax1;
		}
	}
	let epsilonErr := oldMax1;
	solve AFgen;
	let {i in 1..I} VAFsim[i] := VAF[i];
	let thetaAFsim := thetaAF;
}

include simulation.run;

display GENCONS;
display thetaAFsim;
display VAFsim;
display ZAF;
display averageReward;
display confidence;
display epsilonErr;
display epsilonErr/(1-alpha);
